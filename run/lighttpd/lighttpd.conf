server.modules= (
 "mod_access",
 "mod_accesslog",
 "mod_fastcgi",
 "mod_auth",
 "mod_cgi",
 "mod_openssl",
 "mod_rewrite",
 "mod_redirect",
 "mod_proxy",
 "mod_wstunnel",
 "mod_alias",
)

server.document-root="/root/web/"
server.errorlog="/var/run/lighttpderror.log"
accesslog.filename="/var/run/lighttpderror.log"
server.stream-request-body=1
server.max-read-idle=120
server.max-worker=32
server.max-connections=1
server.port=80
#server.use-ipv6="enable"

index-file.names= ( "index.html", "index.php", "index.htm", "default.htm" )
static-file.exclude-extensions =  ( ".php", ".pl", ".fcgi", ".cgi", ".class", ".inc", ".ini" )
mimetype.assign = (
  ".mp3"          =>      "audio/mpeg",
  ".m3u"          =>      "audio/x-mpegurl",
  ".wma"          =>      "audio/x-ms-wma",
  ".wax"          =>      "audio/x-ms-wax",
  ".ogg"          =>      "application/ogg",
  ".wav"          =>      "audio/x-wav",
  ".gif"          =>      "image/gif",
  ".jar"          =>      "application/x-java-archive",
  ".jpg"          =>      "image/jpeg",
  ".jpeg"         =>      "image/jpeg",
  ".png"          =>      "image/png",
  ".xbm"          =>      "image/x-xbitmap",
  ".xpm"          =>      "image/x-xpixmap",
  ".xwd"          =>      "image/x-xwindowdump",
  ".css"          =>      "text/css",
  ".html"         =>      "text/html",
  ".htm"          =>      "text/html",
  ".js"           =>      "text/javascript",
  ".asc"          =>      "text/plain",
  ".c"            =>      "text/plain",
  ".cpp"          =>      "text/plain",
  ".log"          =>      "text/plain",
  ".conf"         =>      "text/plain",
  ".text"         =>      "text/plain",
  ".txt"          =>      "text/plain",
  ".dtd"          =>      "text/xml",
  ".xml"          =>      "text/xml",
  ".mpeg"         =>      "video/mpeg",
  ".mpg"          =>      "video/mpeg",
  ".mov"          =>      "video/quicktime",
  ".qt"           =>      "video/quicktime",
  ".avi"          =>      "video/x-msvideo",
  ".asf"          =>      "video/x-ms-asf",
  ".asx"          =>      "video/x-ms-asf",
  ".wmv"          =>      "video/x-ms-wmv",
)
alias.url += ( "/storage0/" => "//sdcard//recording/" )
fastcgi.server = ("/cgi-bin/video.fcgi" => ( "localhost" => ( "socket" => "/tmp/video-fastcgi.socket")),"/cgi-bin/video.cgi" => ( "localhost" => ( "socket" => "/tmp/video-fastcgi.socket")),"/cgi-bin/video" => ( "localhost" => ( "socket" => "/tmp/video-fastcgi.socket")),)
$HTTP["url"] !~ "^/nvc-cgi/|get_image_list.cgi" {fastcgi.server += ( ".cgi" => ( "localhost" => ( "bin-path" => "/usr/bin/php-cgi -c /etc/php/php.ini", "socket" => "/tmp/php-fastcgi.socket","broken-scriptfilename" => "enable","max-procs" => 1, "bin-environment"	=> ("PHP_FCGI_CHILDREN" => "1",),)) 
)
}
include "/mnt/plugin/plugin_web.conf"
cgi.assign += (
"cgi-bin/param.cgi" => "",
"cgi-bin/admin/plugin_upload" => "",
"cgi-bin/get_image_list.cgi" => "",
"nvc-cgi/avstream.cgi" => "",
"nvc-cgi/viewer/avstream.cgi" => "",
"nvc-cgi/admin/avstream.cgi" => "",
"cgi-bin/admin/vca_event_action" => "",
)
$HTTP["url"] =~ "/nvc-cgi/admin/param.f?cgi" {
url.rewrite-once = ( "^/nvc-cgi/admin/param.f?cgi(.*)$" => "/cgi-bin/param.cgi$1" )
}
cgi.assign += (
"onvif/device_service" => "",
"onvif/media_service" => "",
"onvif/media2_service" => "",
"onvif/ptz_service" => "",
"onvif/onvif_config" => "",
"onvif/event_service" => "",
"onvif/analytics_service" => "",
"onvif/imaging_service" => "",
"onvif/deviceio_service" => "",
)
cgi.assign += (
"onvif/code_update" => "",
"cgi-bin/admin/code_update" => "",
"config.cgi" => "",
"cgi-bin/cgi" => "",
"cgi-bin/result" => "",
"cgi-bin/io" => "",
# "cgi-bin/video" => "",
)
	proxy.debug = 0
	proxy.balance = "hash"
	proxy.server = (  ".pxy" => (( "host" => "127.0.0.1", "port" => 554 )) ) 
$HTTP["remoteip"] != "127.0.0.1" { 
auth.backend = "htdigest"
auth.backend.htdigest.userfile = "/usr/lighttpd/lighttpd.user"
auth.require = (
 "/profile.ws"  => ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
 "/cgi-bin/automap"	=> ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
 "/cgi-bin/camera"	=> ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
 "/cgi-bin/index"	=> ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
 "/cgi-bin/video" => ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
 "/cgi-bin/video.cgi" => ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
 "/cgi-bin/video.fcgi" => ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
 "/cgi-bin/param.cgi" => ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
 "/cgi-bin/ptz" => ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
 "/cgi-bin/osd" => ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
 "/cgi-bin/io" => ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
 "/cgi-bin/motion" => ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
 "/cgi-bin/set_pos"	=> ( "method" => "digest", "realm" => "IP Camera", "require" => "valid-user" ),
"/cgi-bin/admin"=> ( "method" => "digest", "realm" => "IP Camera", "require" => "user=root" ),
"/cgi-bin/system"=> ( "method" => "digest", "realm" => "IP Camera", "require" => "user=root" ),
"/onvif/onvif_config"=> ( "method" => "digest", "realm" => "IP Camera", "require" => "user=root" ),
"/cgi-bin/getUploadStatus"=> ( "method" => "digest", "realm" => "IP Camera", "require" => "user=root" ),
"/cgi-bin/get_enc_info"=> ( "method" => "digest", "realm" => "IP Camera", "require" => "user=root" ),
"/cgi-bin/class"=> ( "method" => "digest", "realm" => "IP Camera", "require" => "user=root" ),
"/cgi-bin/_define"=> ( "method" => "digest", "realm" => "IP Camera", "require" => "user=root" ),
"/cgi-bin/_upgrade"=> ( "method" => "digest", "realm" => "IP Camera", "require" => "user=root" ),
"/recordings"=> ( "method" => "digest", "realm" => "IP Camera", "require" => "user=root" )
)
}
server.upload-dirs= ( "/firmware")
server.max-request-size=512000
server.network-backend="writev"
	wstunnel.server = (  ".ws" => (( "host" => "127.0.0.1", "port" => 554, "proto"  => "tcp" )) ) 
	wstunnel.frame-type = "text"
	wstunnel.ping-interval  = 30
